import express from 'express';
import fetch from 'node-fetch';
import OpenAI from 'openai';
import readlineSync from 'readline-sync';
import cors from 'cors'; // Import the cors package


const app = express();
const port = 4000;
// Set up CORS middleware
app.use(cors());
// // Set your OpenAI API key using environment variable
const openAI = process.env.OPENAI_API_KEY;

if (!openAI) {
  throw new Error("The OPENAI_API_KEY environment variable is missing or empty; either provide it, or instantiate the OpenAI client with an apiKey option.");
}

const openai = new OpenAI({ key: openAI });

// Function to retrieve CVE information from the NVD API
async function getCveInformation({ cveId = null }) {
  if (!cveId) {
    throw new Error("Please provide a valid CVE ID");
  }

  const baseUrl = 'https://services.nvd.nist.gov/rest/json/cves/2.0';
  const url = new URL(baseUrl);
  url.searchParams.append('cveId', cveId);

  try {
    const response = await fetch(url.toString());

    if (response.ok) {
      const contentType = response.headers.get('content-type');

      if (contentType && contentType.includes('application/json')) {
        const data = await response.json();
        const cveDetails = processApiResponse(data);

         // Calculate the priority based on the CVE details
         const cvePriority = calculatePriority(cveDetails);
        
        // Use OpenAI to generate additional information based on CVE details
        const additionalInfo = await generateAdditionalInfo(cveDetails);

        // Combine the original CVE details and the generated additional information
        const result = { cveDetails, priority: cvePriority, additionalInfo };
        return result;
      } else {
        const responseText = await response.text();
        console.error('Invalid content type. Expected JSON, but received:', contentType, 'Response:', responseText);
        return null;
      }
    } else if (response.status === 404) {
      console.log('CVE not found:', cveId);
      return null;
    } else {
      const responseText = await response.text();
      console.error('Error fetching CVE information. Status:', response.status, 'Response:', responseText);
      return null;
    }
  } catch (error) {
    console.error('Error fetching CVE information:', error.message);
    throw error;
  }
}
function calculatePriority(cveDetails) {
  // Implement your logic to calculate the priority based on CVE details
  // For example, you can use the CVSS score, impact, and other factors
  // Return a value between 1 and 5, where 1 is the lowest priority and 5 is the highest priority
  
}
// Function to process the API response
function processApiResponse(data) {
  // Implement your logic to extract relevant information from the API response
  // For simplicity, returning the whole data here; modify as needed
  return data;
}

// Function to generate additional information using OpenAI
async function generateAdditionalInfo(cveDetails,priority) {
  // Implement your logic to use OpenAI to generate additional information
  // For simplicity, using a placeholder prompt here; modify as needed
  const messages = [
    { role: 'system', content: 'You are a helpful assistant.' },
    { role: 'user', content: `Generate additional information based on CVE details: ${JSON.stringify(cveDetails,priority)}` },
    { role: 'assistant', content: 'Provide suggestions for mitigation and recommended actions.' },
  ];

  const response = await openai.chat.completions.create({
    model: 'gpt-4', // Use appropriate model name
    messages,
  });

  // Extract relevant information from OpenAI response
  const additionalInfo = response.choices[0].message.content;

  return additionalInfo;
}
app.get('/getCveSiemSoar', cors(), async (req, res) => {
  const cveId = req.query.cveId;

  // Integrate with a SIEM and SOAR system
  // Use machine learning algorithms to detect anomalies, threats, and patterns
  // Use natural language processing algorithms to extract insights and recommendations

  // Return the SIEM and SOAR data as JSON
  res.json(siemSoarData);
});
app.get('/getCveTimeSeries', cors(), async (req, res) => {
  const startDate = req.query.startDate;
  const endDate = req.query.endDate;

  // Fetch the Time Series data from the database or Time Series database
  // Use machine learning algorithms to predict future CVE trends

  // Return the Time Series data as JSON
  res.json(timeSeriesData);
});

// Your existing route for the homepage
app.get('/', (req, res) => {
  res.send('Server is running. Go to http://localhost:4000');
});

// New route to handle the CVE input
app.get('/getCveInformation', cors(), async (req, res) => {
  const cveId = req.query.cveId;

  if (!cveId) {
    res.send('Please provide a valid CVE ID');
    return;
  }

  try {
    const parameters = { "cveId": cveId };
    const result = await getCveInformation(parameters);

    // Assuming you want to send the result as JSON
    res.json(result);
  } catch (error) {
    // Handle errors
    res.status(500).send(`Error: ${error.message}`);
  }
});


// New route to handle chatbot interactions
app.get('/chatbot', cors(), async (req, res) => {
  const userMessage = req.query.message;

  try {
    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        { role: 'user', content: userMessage },
        { role: 'assistant', content: '' }, // Let the chatbot generate a response
      ],
    });

    const chatbotResponse = response.choices[0].message.content;
    res.json({ response: chatbotResponse });
  } catch (error) {
    res.status(500).json({ error: 'Error generating chatbot response' });
  }
});


app.listen(port, () => {
  console.log(`Server is running at http://localhost:${port}`);
});