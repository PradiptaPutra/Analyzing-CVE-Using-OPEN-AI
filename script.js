document.addEventListener("DOMContentLoaded", function() {
  async function getCveInformation() {
      const cveId = document.getElementById('cveIdInput').value;
      const loadingIndicator = document.getElementById('loadingIndicator');
  
      // Check if loadingIndicator exists before accessing its classList
      if (loadingIndicator) {
          loadingIndicator.classList.remove('hidden');
      }
  
      try {
          const response = await fetch(`http://localhost:4000/getCveInformation?cveId=${cveId}`);
          const result = await response.json();
  
          // Extract relevant CVE details
          const cveDetails = result.cveDetails.vulnerabilities[0].cve;
  
          // Extract additional information generated by AI
          const additionalInfo = result.additionalInfo;
  
          // Construct formatted HTML to display CVE details and additional information
          const formattedResult = `
            <h2>CVE ID: ${cveDetails.id}</h2>
            <p><strong>Published:</strong> ${cveDetails.published}</p>
            <p><strong>Last Modified:</strong> ${cveDetails.lastModified}</p>
            <p><strong>Vulnerability Status:</strong> ${cveDetails.vulnStatus}</p>
            <h3>Description:</h3>
            <p>${cveDetails.descriptions[0].value}</p>
            <h3>CVSS Metrics:</h3>
            <p><strong>Attack Vector:</strong> ${cveDetails.metrics.cvssMetricV31[0].cvssData.attackVector}</p>
            <p><strong>Attack Complexity:</strong> ${cveDetails.metrics.cvssMetricV31[0].cvssData.attackComplexity}</p>
            <p><strong>Privileges Required:</strong> ${cveDetails.metrics.cvssMetricV31[0].cvssData.privilegesRequired}</p>
            <p><strong>Confidentiality Impact:</strong> ${cveDetails.metrics.cvssMetricV31[0].cvssData.confidentialityImpact}</p>
            <p><strong>Integrity Impact:</strong> ${cveDetails.metrics.cvssMetricV31[0].cvssData.integrityImpact}</p>
            <p><strong>Availability Impact:</strong> ${cveDetails.metrics.cvssMetricV31[0].cvssData.availabilityImpact}</p>
            <p><strong>Base Score:</strong> ${cveDetails.metrics.cvssMetricV31[0].cvssData.baseScore}</p>
            <p><strong>Base Severity:</strong> ${cveDetails.metrics.cvssMetricV31[0].cvssData.baseSeverity}</p>
            <h3>Additional AI Information:</h3>
            <p>${additionalInfo}</p>
          `;
  
          // Display formatted CVE details and additional information
          document.getElementById('result').innerHTML = formattedResult;
      } catch (error) {
          console.error('Error:', error);
      } finally {
          // Check if loadingIndicator exists before accessing its classList
          if (loadingIndicator) {
              loadingIndicator.classList.add('hidden');
          }
      }
  }
  
  function sendMessage() {
    const userInput = document.getElementById('chatInput').value;
    const chatbox = document.getElementById('chatbox');
    const userMessage = document.createElement('div');
    userMessage.classList.add('chat-message', 'chat-message-user');
    userMessage.innerText = userInput;
    chatbox.appendChild(userMessage);
    document.getElementById('chatInput').value = ''; // Clear input field

    // Make request to AI assistant
    fetch(`http://localhost:4000/chatbot?message=${userInput}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    })
    .then(response => response.json())
    .then(data => {
      const assistantMessage = document.createElement('div');
      assistantMessage.classList.add('chat-message', 'chat-message-assistant');
      assistantMessage.innerText = data.response;
      chatbox.appendChild(assistantMessage);
    })
    .catch(error => console.error('Error:', error));
}

// Attach event listener to the "Get Information" button
document.getElementById('getCveInfoButton').addEventListener('click', getCveInformation);

// Attach event listener to the "Send" button if it exists
const sendMessageButton = document.getElementById('sendMessageButton');
if (sendMessageButton) {
  sendMessageButton.addEventListener('click', sendMessage);
  
}
});

function toggleDarkMode() {
const html = document.documentElement;
html.classList.toggle('dark-mode');

if (html.classList.contains('dark-mode')) {
  localStorage.theme = 'dark';
} else {
  localStorage.theme = 'light';
}
}
